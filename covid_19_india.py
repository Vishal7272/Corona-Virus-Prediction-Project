# -*- coding: utf-8 -*-
"""COVID_19_India

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Vishal7272/Corona-Virus-Prediction-Project/blob/master/COVID_19_India.ipynb
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import folium
from folium import plugins
import warnings
from datetime import datetime
import os
import re
import glob
import requests
from bs4 import BeautifulSoup

#plt.rcParams['figure.figsize'] - 10 ,12
warnings.filterwarnings('ignore')

link='https://www.mohfw.gov.in/'
req=requests.get(link)
soup = BeautifulSoup(req.content,"html.parser")

thead=soup.find_all('thead')[-1]
head=thead.find_all('tr')

tbody=soup.find_all('tbody')[-1]
body=tbody.find_all('tr')

head_row=[]
body_row=[]

for tr in head:
  td=tr.find_all(['th','td'])
  row=[i.text for i in td]
  head_row.append(row)

for tr in body:
  td=tr.find_all(['th','td'])
  row=[i.text for i in td]
  body_row.append(row)

#save content in dataframe

df_bs=pd.DataFrame(body_row[:len(body_row)-6], columns=head_row[0])

df_bs.drop('S. No.',axis=1,inplace=True)
#df_bs.head(36)

"""## *Data cleaning*"""

#datetime information
# copy bs dataframe into df_india dataframe

df_India=df_bs.copy()
#set datatime
now = datetime.now()
df_India['Date']=now.strftime("%m/%d/%y")
df_India['Date']=pd.to_datetime(df_India['Date'], format='%m/%d/%y')
#df_India.head(36)

lat={'Andaman and Nicobar Islands':11.66702557,'Andhra Pradesh':14.7504291,'Arunachal Pradesh':27.10039878,'Assam':26.7499809,'Bihar':25.78541445,'Chandigarh':30.71999697,'Chhattisgarh':22.09042035,
     'Dadar Nagar Haveli':20.26657819,'Delhi':28.6699929,'Goa':15.491997,'Haryana':28.45000633,'Himachal Pradesh':31.10002545,'Jammu and Kashmir':34.29995933,'Jharkhand':23.80039349,
     'Karnataka':12.57038129,'Kerala':8.900372741,'Lakshadweep':10.56257331,'Madhya Pradesh':21.30039105,'Maharashtra':19.25023195,'Manipur':24.79997072,'Meghalaya':25.57049217,'Mizoram':23.71039899,
     'Nagaland':25.6669979,'Odisha':19.82042971,'Puducherry':11.93499371,'Punjab':31.51997398,'Rajasthan':26.44999921,'Sikkim':27.3333303,'Tamil Nadu':12.92038576,'Tripura':23.83540428,
     'Uttar Pradesh':27.59998069,'Uttaranchal':30.32040895,'West Bengal':22.58039044,'Gujarat':22.258652,'Ladakh':40.724579,'Telengana':18.112436,'Uttarakhand':30.066753}

long={'Andaman and Nicobar Islands':92.73598262,'Andhra Pradesh':78.57002559,'Arunachal Pradesh':93.61660071,'Assam':94.21666744,'Bihar':87.4799727,'Chandigarh':76.78000565,'Chhattisgarh':82.15998734,
     'Dadar Nagar Haveli':73.0166178,'Delhi':77.23000403,'Goa':73.81800065,'Haryana':77.01999101,'Himachal Pradesh':77.16659704,'Jammu and Kashmir':74.46665849,'Jharkhand':86.41998572,
     'Karnataka':76.91999711,'Kerala':76.56999263,'Lakshadweep':72.63686717,'Madhya Pradesh':76.13001949,'Maharashtra':73.16017493,'Manipur':93.95001705,'Meghalaya':	91.8800142,'Mizoram':92.72001461,
     'Nagaland':94.11657019,'Odisha':85.90001746,'Puducherry':79.83000037,'Punjab':75.98000281,'Rajasthan':74.63998124,'Sikkim':88.6166475,'Tamil Nadu':79.15004187,'Tripura':91.27999914,
     'Uttar Pradesh':78.05000565,'Uttaranchal':78.05000565,'West Bengal':88.32994665,'Gujarat':71.192383,'Ladakh':-73.997147,'Telengana':79.019302,'Uttarakhand':79.019302}

df_India['Latitude']=df_India['Name of State / UT'].map(lat)

df_India['Longitude']=df_India['Name of State / UT'].map(long)

#df_India.head(36)

df_India=df_India.rename(columns={'Cured/Discharged/Migrated':'Cured',
                                  'Cured/Discharged/Migrated*':'Cured',
                                  'Active Cases*':'total_cases',
                                  'Total Confirmed cases *':'Confirmed',
                                  'Total Confirmed cases* ':'Confirmed',
                                  'Total Confirmed cases ':'Confirmed',
                                  'Total Confirmed cases*':'Confirmed'})
                                  

df_India=df_India.rename(columns={'Cured/Discharged':'Cured'})
df_India=df_India.rename(columns={'Name of State / UT':'State/UnionTerritory'})
df_India=df_India.rename(columns=lambda x: re.sub('Total Confirmed cases \(Including.* foregin Nationals\)','Total Confirmed cases',x))

df_India=df_India.rename(columns={'Deaths( more then 70% cases due to comorbidities )':'Deaths',
                                  'Deaths**':'Deaths'})

df_India['State/UnionTerritory'].unique()

df_India.isna().sum()

df_India.nunique()

"""# save data"""

file_name=now.strftime('%y_%m_%d')+' - COVID_19_India.csv'
#location for savinf the file
file_loc='/content/'


df_India.to_csv(file_loc + file_name, index= False)
df_India.head(36)

df_India['Date']=pd.to_datetime(df_India['Date'])

df_India['State/UnionTerritory'].replace('Chattisgarh','Chhattisgarh',inplace=True)
df_India['State/UnionTerritory'].replace('Pondicherry','Puducherry',inplace=True)

"""Final Dataframe"""

df_India.head(36)

df_India.info()

"""save final dataframe

"""

file_name=now.strftime('%y_%m_%d')+' - COVID-19_India_preprocessed.csv'
#location for savinf the file
file_loc='/content/'


df_India.to_csv(file_loc + file_name, index= False)
df_India.head(36)

df = pd.read_csv('/content/20_05_31 - COVID-19_India_preprocessed.csv')
df_India= df.copy()
df

"""# Analysing COVID-19 cases in India"""

total_cases=df['Confirmed'].sum()
print("total no of confirmed cases of india till date(31th May ,2020):",total_cases)

#droping
df_temp=df.drop(['Latitude','Longitude','Date'],axis=1) 
#highlite dataframe
df_temp.style.background_gradient(cmap='Reds')

today=now.strftime('%y_%m_%d')
total_cured=df['Cured'].sum()
print("Total people who where cured"+today+" are :",total_cured)
total_cases=df['Confirmed'].sum()
print("Total people who where decetated COVID-19 as of "+today+" are :",total_cases)
total_death=df['Deaths'].sum()
print("Total people who died COVID-19 as of"+today+" are :",total_death)
total_active=total_cases-total_cured-total_death
print("Total active COVID-19 cases as of"+today+" are :",total_active)

df['Total_Active']=df['Confirmed']-(df['Deaths']-df['Cured'])
total_active=df['Total_Active'].sum()
print("Total numbers of COVID_19 cases across India :",total_active)
Tot_cases=df.groupby('State/UnionTerritory')['Total_Active'].sum().sort_values(ascending=False).to_frame()
Tot_cases.style.background_gradient(cmap='Reds')

#state cases
import numpy as np

state_cases=df_India.groupby('State/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()

state_cases['Active']=state_cases['Confirmed']-(state_cases['Deaths']+state_cases['Cured'])
state_cases['Death Rate(pre 100)'] = np.round(100* state_cases['Deaths']/state_cases['Confirmed'],2)
state_cases['Cure Rate(pre 100)'] = np.round(100* state_cases['Cured']/state_cases['Confirmed'],2)

state_cases.sort_values('Confirmed',ascending=False).fillna(0).style.background_gradient(cmap='Blues',subset=['Confirmed'])\
                                                                    .background_gradient(cmap='Blues',subset=['Deaths'])\
                                                                    .background_gradient(cmap='Blues',subset=['Cured'])\
                                                                    .background_gradient(cmap='Blues',subset=['Active'])\
                                                                    .background_gradient(cmap='Blues',subset=['Death Rate(pre 100)'])\
                                                                    .background_gradient(cmap='Blues',subset=['Cure Rate(pre 100)'])

"""add driver file

"""

india_covid_19 = pd.read_csv('/content/drive/My Drive/covid_19_india.csv')
hospital_beds = pd.read_csv('/content/drive/My Drive/HospitalBedsIndia.csv')
individual_details = pd.read_csv('/content/drive/My Drive/IndividualDetails.csv')
ICMR_details = pd.read_csv('/content/drive/My Drive/ICMRTestingDetails.csv')
ICMR_labs = pd.read_csv('/content/drive/My Drive/ICMRTestingLabs.csv')
state_testing = pd.read_csv('/content/drive/My Drive/StatewiseTestingDetails.csv')
population = pd.read_csv('/content/drive/My Drive/population_india_census2011.csv')

india_covid_19['Date'] = pd.to_datetime(india_covid_19['Date'],dayfirst = True)
state_testing['Date'] = pd.to_datetime(state_testing['Date'])
ICMR_details['DateTime'] = pd.to_datetime(ICMR_details['DateTime'],dayfirst = True)
ICMR_details = ICMR_details.dropna(subset=['TotalSamplesTested', 'TotalPositiveCases'])

confirmed_df = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv')
deaths_df = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv')
recovered_df = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv')
latest_data = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/04-04-2020.csv')



dates = list(confirmed_df.columns[4:])
dates = list(pd.to_datetime(dates))
dates_india = dates[8:]

tes = list(pd.to_datetime(dates))
dates_india = dates[8:]
df1 = confirmed_df.groupby('Country/Region').sum().reset_index()
df2 = deaths_df.groupby('Country/Region').sum().reset_index()
df3 = recovered_df.groupby('Country/Region').sum().reset_index()

k = df1[df1['Country/Region']=='India'].loc[:,'1/30/20':]
india_confirmed = k.values.tolist()[0] 

k = df2[df2['Country/Region']=='India'].loc[:,'1/30/20':]
india_deaths = k.values.tolist()[0] 

k = df3[df3['Country/Region']=='India'].loc[:,'1/30/20':]
india_recovered = k.values.tolist()[0] 

plt.figure(figsize= (15,10))
plt.xticks(rotation = 90 ,fontsize = 11)
plt.yticks(fontsize = 10)
plt.xlabel("Dates",fontsize = 20)
plt.ylabel('Total cases',fontsize = 20)
plt.title("Total Confirmed, Active, Death in India" , fontsize = 20)

ax1 = plt.plot_date(y= india_confirmed,x= dates_india,label = 'Confirmed',linestyle ='-',color = 'b')
ax2 = plt.plot_date(y= india_recovered,x= dates_india,label = 'Recovered',linestyle ='-',color = 'g')
ax3 = plt.plot_date(y= india_deaths,x= dates_india,label = 'Death',linestyle ='-',color = 'r')
plt.legend()

import matplotlib.dates as mdates
ICMR_details['Percent_positive'] = round((ICMR_details['TotalPositiveCases']/ICMR_details['TotalSamplesTested'])*100,1)

fig, ax1 = plt.subplots(figsize= (15,5))
ax1.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))
ax1.set_ylabel('Positive Cases (% of Total Samples Tested)')
ax1.bar(ICMR_details['DateTime'] , ICMR_details['Percent_positive'], color="red",label = 'Percentage of Positive Cases')
ax1.text(ICMR_details['DateTime'][0],4, 'Total Samples Tested as of Apr 23rd = 541789', style='italic',fontsize= 10,
        bbox={'facecolor': 'white' ,'alpha': 0.5, 'pad': 5})

ax2 = ax1.twinx()  
ax2.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))
ax2.set_ylabel('Num Samples Tested')
ax2.fill_between(ICMR_details['DateTime'],ICMR_details['TotalSamplesTested'],color = 'black',alpha = 0.5,label = 'Samples Tested');

plt.legend(loc="upper left")
plt.title('Total Samples Tested')
plt.show()

"""# Testing LIVE Status"""

import json
# get response from the web page
response = requests.get('https://api.covid19india.org/state_test_data.json')

# get contents from the response
content = response.content

# parse the json file
parsed = json.loads(content)

# keys
parsed.keys()

# save data in a dataframe
tested = pd.DataFrame(parsed['states_tested_data'])

# first few rows
tested.tail()

# fix datatype
tested['updatedon'] = pd.to_datetime(tested['updatedon'])

# save file as a scv file
tested.to_csv('updated_tests_latest_state_level.csv', index=False)

state_test_cases = tested.groupby(['updatedon','state'])['totaltested','populationncp2019projection','testpositivityrate',	'testsperpositivecase',	'testsperthousand','totalpeoplecurrentlyinquarantine'].max().reset_index()

state_test_cases.head(36)

state_test_cases = tested.groupby('state')['totaltested','populationncp2019projection','testpositivityrate',	'testsperpositivecase',	'testsperthousand','totalpeoplecurrentlyinquarantine'].max()
state_test_cases['testpositivityrate'] = state_test_cases['testpositivityrate'].str.replace('%', '')

state_test_cases = state_test_cases.apply(pd.to_numeric)

state_test_cases.nunique()

state_test_cases.sort_values('totaltested', ascending= False).style.background_gradient(cmap='Blues',subset=["totaltested"])\
                        .background_gradient(cmap='Blues',subset=["populationncp2019projection"])\
                        .background_gradient(cmap='Blues',subset=["testpositivityrate"])\
                        .background_gradient(cmap='Blues',subset=["testsperpositivecase"])\
                        .background_gradient(cmap='Blues',subset=["testsperthousand"])\
                        .background_gradient(cmap='Blues',subset=["totalpeoplecurrentlyinquarantine"])

"""###Day-by-Day Confirmed Cases in Top 15 States in India"""

all_state = list(df_India['State/UnionTerritory'].unique())

latest = india_covid_19[india_covid_19['Date'] > '24-03-20']
state_cases = latest.groupby('State/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()
latest['Active'] = latest['Confirmed'] - (latest['Deaths']- latest['Cured'])
state_cases = state_cases.sort_values('Confirmed', ascending= False).fillna(0)
states =list(state_cases['State/UnionTerritory'][0:15])

states_confirmed = {}
states_deaths = {}
states_recovered = {}
states_dates = {}
states_active={}

for state in states:
    df = latest[latest['State/UnionTerritory'] == state].reset_index()
    k = []
    l = []
    m = []
    n = []
    for i in range(1,len(df)):
        k.append(df['Confirmed'][i]-df['Confirmed'][i-1])
        l.append(df['Deaths'][i]-df['Deaths'][i-1])
        m.append(df['Cured'][i]-df['Cured'][i-1])
        n.append(df['Active'][i]-df['Active'][i-1])
    states_confirmed[state] = k
    states_deaths[state] = l
    states_recovered[state] = m
    states_active[state] = n
    date = list(df['Date'])
    states_dates[state] = date[1:]
    
fig = plt.figure(figsize= (25,17))
plt.suptitle('Day-by-Day Confirmed Cases in Top 15 States in India',fontsize = 20,y=1.0)
k=0
for i in range(1,15):
    ax = fig.add_subplot(5,3,i)
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))
    ax.bar(states_dates[states[k]],states_confirmed[states[k]],label = 'Day wise Confirmed Cases ') 
    plt.title(states[k],fontsize = 20)
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper left')
    k=k+1
plt.tight_layout(pad=5.0)

"""
## Growth Rate in top 15 States in India"""

def calc_growthRate(values):
    k = []
    for i in range(1,len(values)):
        summ = 0
        for j in range(i):
            summ = summ + values[j]
        rate = (values[i]/summ)*100
        k.append(int(rate))
    return k

fig = plt.figure(figsize= (25,17))
plt.suptitle('Growth Rate in Top 15 States',fontsize = 20,y=1.0)
k=0
for i in range(1,15):
    ax = fig.add_subplot(5,3,i)
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))
    #ax.bar(states_dates[states[k]],states_confirmed[states[k]],label = 'Day wise Confirmed Cases ') 
    growth_rate = calc_growthRate(states_confirmed[states[k]])
    ax.plot_date(states_dates[states[k]][21:],growth_rate[20:],color = '#9370db',label = 'Growth Rate',linewidth =3,linestyle='-')  
    plt.title(states[k],fontsize = 20)
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper left')
    k=k+1
plt.tight_layout(pad=3.0)

"""## Exploring different types of hospital beds available in India during lockdown"""

cols_object = list(hospital_beds.columns[2:8])

for cols in cols_object:
    hospital_beds[cols] = hospital_beds[cols].astype(int,errors = 'ignore')

hospital_beds = hospital_beds.drop('Sno',axis=1)


hospital_beds.head(36)

"""## Exploring top 10 States in each health facilities"""

#ERROR
top_10_primary = hospital_beds.nlargest(10,'NumPrimaryHealthCenters_HMIS')
top_10_community = hospital_beds.nlargest(10,'NumCommunityHealthCenters_HMIS')
top_10_district_hospitals = hospital_beds.nlargest(10,'NumDistrictHospitals_HMIS')
top_10_public_facility = hospital_beds.nlargest(10,'TotalPublicHealthFacilities_HMIS')
top_10_public_beds = hospital_beds.nlargest(10,'NumPublicBeds_HMIS')

plt.figure(figsize=(15,10))
plt.suptitle('Top 10 States in each Health Facility',fontsize=20)
plt.subplot(221)
plt.title('Primary Health Centers')
plt.barh(top_10_primary['State/UT'],top_10_primary['NumPrimaryHealthCenters_HMIS'],color ='#87479d');

plt.subplot(222)
plt.title('Community Health Centers')
plt.barh(top_10_community['State/UT'],top_10_community['NumCommunityHealthCenters_HMIS'],color = '#9370db');

plt.subplot(224)
plt.title('Total Public Health Facilities')
plt.barh(top_10_community['State/UT'],top_10_public_facility['TotalPublicHealthFacilities_HMIS'],color='#9370db');

plt.subplot(223)
plt.title('District Hospitals')
plt.barh(top_10_community['State/UT'],top_10_district_hospitals['NumDistrictHospitals_HMIS'],color = '#87479d');

"""## Exploring Urban and Rural Healthcare Facility"""

top_rural_hos = hospital_beds.nlargest(10,'NumRuralHospitals_NHP18')
top_rural_beds = hospital_beds.nlargest(10,'NumRuralBeds_NHP18')
top_urban_hos = hospital_beds.nlargest(10,'NumUrbanHospitals_NHP18')
top_urban_beds = hospital_beds.nlargest(10,'NumUrbanBeds_NHP18')

plt.figure(figsize=(15,10))
plt.suptitle('Urban and Rural Health Facility',fontsize=20)
plt.subplot(221)
plt.title('Rural Hospitals')
plt.barh(top_rural_hos['State/UT'],top_rural_hos['NumRuralHospitals_NHP18'],color = '#87479d');

plt.subplot(222)
plt.title('Urban Hospitals')
plt.barh(top_urban_hos['State/UT'],top_urban_hos['NumUrbanHospitals_NHP18'],color = '#9370db');

plt.subplot(223)
plt.title('Rural Beds')
plt.barh(top_rural_beds['State/UT'],top_rural_beds['NumRuralBeds_NHP18'],color = '#87479d');

plt.subplot(224)
plt.title('Urban Beds')
plt.barh(top_urban_beds['State/UT'],top_urban_beds['NumUrbanBeds_NHP18'],color = '#9370db');

"""
## Exploring Statewise Testing Insights"""

state_test = pd.pivot_table(state_testing, values=['TotalSamples','Negative','Positive'], index='State', aggfunc='max')
state_names = list(state_test.index)
state_test['State'] = state_names

plt.figure(figsize=(25,20))
sns.set_color_codes("pastel")
sns.barplot(x="TotalSamples", y= state_names, data=state_test,label="Total Samples", color = '#7370db')
sns.barplot(x='Negative', y=state_names, data=state_test,label='Negative', color= '#af8887')
sns.barplot(x='Positive', y=state_names, data=state_test,label='Positive', color='#6ff79d')
plt.title('Testing statewise insight',fontsize = 20)
plt.legend(ncol=2, loc="lower right", frameon=True);

"""## Number of ICMR Testing Centres in each state"""

values = list(ICMR_labs['state'].value_counts())
names = list(ICMR_labs['state'].value_counts().index)

plt.figure(figsize=(15,10))
sns.set_color_codes("pastel")
plt.title('ICMR Testing Centers in each State', fontsize = 20)
sns.barplot(x= values, y= names,color = '#ff2345');

"""## Let's Start with the predictions"""

train = pd.read_csv('/content/drive/My Drive/train.csv')
test = pd.read_csv('/content/drive/My Drive/test.csv')
train['Date'] = pd.to_datetime(train['Date'])
test['Date'] = pd.to_datetime(test['Date'])

!pip install Prophet

from fbprophet import Prophet
from fbprophet.plot import plot_plotly, add_changepoints_to_plot

k = df1[df1['Country/Region']=='India'].loc[:,'1/22/20':]
india_confirmed = k.values.tolist()[0] 
data = pd.DataFrame(columns = ['ds','y'])
data['ds'] = dates
data['y'] = india_confirmed

confirmed.columns = ['ds','y']
#confirmed['ds'] = confirmed['ds'].dt.date
confirmed['ds'] = pd.to_datetime(confirmed['ds'])

"""## Forecasting Confirmed NCOVID-19 Cases Worldwide with Prophet (Base model)"""

prop = Prophet(interval_width=0.95)
prop.fit(data)
future = prop.make_future_dataframe(periods=15)
future.tail(15)

#predicting the future with date, and upper and lower limit of y value
forecast = prop.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

confirmed_forecast_plot = prop.plot(forecast)

confirmed_forecast_plot =prop.plot_components(forecast)

"""## ARIMA Model"""

from statsmodels.tsa.arima_model import ARIMA

from datetime import timedelta 

arima = ARIMA(data['y'], order=(5, 1, 0))
arima = arima.fit(trend='c', full_output=True, disp=True)
forecast = arima.forecast(steps= 30)
pred = list(forecast[0])

start_date = data['ds'].max()
prediction_dates = []
for i in range(30):
    date = start_date + timedelta(days=1)
    prediction_dates.append(date)
    start_date = date
plt.figure(figsize= (15,10))
plt.xlabel("Dates",fontsize = 20)
plt.ylabel('Total cases',fontsize = 20)
plt.title("Predicted Values for the next 15 Days" , fontsize = 20)

plt.plot_date(y= pred,x= prediction_dates,linestyle ='dashed',color = '#ff9999',label = 'Predicted');
plt.plot_date(y=data['y'],x=data['ds'],linestyle = '-',color = 'blue',label = 'Actual');
plt.legend();

"""## Visualising the spread geographically"""

# Learn how to use folium to create a zoomable map
map = folium.Map(location=[20, 70], zoom_start=4,tiles='Stamenterrain')

for lat, lon, value, name in zip(df_India['Latitude'], df_India['Longitude'], df_India['Confirmed'], df_India['State/UnionTerritory']):
    folium.CircleMarker([lat, lon], radius=value*0.002, popup = ('<strong>State</strong>: ' + str(name).capitalize() + '<br>''<strong>Total Cases</strong>: ' + str(value) + '<br>'),color='red',fill_color='red',fill_opacity=0.3 ).add_to(map)
map

"""### Exploring World wide data

## Visualizing: Worldwide NCOVID-19 cases
"""

world_confirmed = confirmed_df[confirmed_df.columns[-1:]].sum()
world_recovered = recovered_df[recovered_df.columns[-1:]].sum()
world_deaths = deaths_df[deaths_df.columns[-1:]].sum()
world_active = world_confirmed - (world_recovered - world_deaths)

labels = ['Active','Recovered','Deceased']
sizes = [world_active,world_recovered,world_deaths]
color= ['blue','green','red']
explode = []

for i in labels:
    explode.append(0.05)
    
plt.figure(figsize= (15,10))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=9, explode = explode,colors = color)
centre_circle = plt.Circle((0,0),0.70,fc='white')

fig = plt.gcf()
fig.gca().add_artist(centre_circle)
plt.title('World COVID-19 Cases',fontsize = 20)
plt.axis('equal')  
plt.tight_layout()

dates

hotspots = ['China','Germany','Iran','Italy','Spain','US','Korea, South','France','Turkey','United Kingdom','India']
dates = list(confirmed_df.columns[4:])
dates = list(pd.to_datetime(dates))
dates_india = dates[8:]

df1 = confirmed_df.groupby('Country/Region').sum().reset_index()
df2 = deaths_df.groupby('Country/Region').sum().reset_index()
df3 = recovered_df.groupby('Country/Region').sum().reset_index()

global_confirmed = {}
global_deaths = {}
global_recovered = {}
global_active= {}

for country in hotspots:
    k =df1[df1['Country/Region'] == country].loc[:,'1/30/20':]
    global_confirmed[country] = k.values.tolist()[0]

    k =df2[df2['Country/Region'] == country].loc[:,'1/30/20':]
    global_deaths[country] = k.values.tolist()[0]

    k =df3[df3['Country/Region'] == country].loc[:,'1/30/20':]
    global_recovered[country] = k.values.tolist()[0]
    
# for country in hotspots:
#     k = list(map(int.__sub__, global_confirmed[country], global_deaths[country]))
#     global_active[country] = list(map(int.__sub__, k, global_recovered[country]))
    
fig = plt.figure(figsize= (15,25))
plt.suptitle('Active, Recovered, Deaths in Hotspot Countries and India as of '+ today,fontsize = 20,y=1.0)
#plt.legend()
k=0
for i in range(1,12):
    ax = fig.add_subplot(6,2,i)
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))
    # ax.bar(dates_india,global_active[hotspots[k]],color = 'green',alpha = 0.6,label = 'Active');
    ax.bar(dates_india,global_confirmed[hotspots[k]],color='blue',label = 'Confirmed');
    ax.bar(dates_india,global_recovered[hotspots[k]],color='grey',label = 'Recovered');
    ax.bar(dates_india,global_deaths[hotspots[k]],color='red',label = 'Death');   
    plt.title(hotspots[k])
    handles, labels = ax.get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper left')
    k=k+1

plt.tight_layout(pad=3.0)

countries = ['China','Germany','Iran','Italy','Spain','US','Korea, South','France','United Kingdom','India']

global_confirmed = []
global_recovered = []
global_deaths = []

for country in countries:
    k =df1[df1['Country/Region'] == country].loc[:,'1/30/20':]
    global_confirmed.append(k.values.tolist()[0]) 

    k =df2[df2['Country/Region'] == country].loc[:,'1/30/20':]
    global_deaths.append(k.values.tolist()[0]) 

    k =df3[df3['Country/Region'] == country].loc[:,'1/30/20':]
    global_deaths.append(k.values.tolist()[0])

plt.figure(figsize= (15,10))
plt.xticks(rotation = 90 ,fontsize = 11)
plt.yticks(fontsize = 10)
plt.xlabel("Dates",fontsize = 20)
plt.ylabel('Total cases',fontsize = 20)
plt.title("Comparison with other Countries" , fontsize = 20)

for i in range(len(countries)):
    plt.plot_date(y= global_confirmed[i],x= dates_india,label = countries[i])
plt.legend();